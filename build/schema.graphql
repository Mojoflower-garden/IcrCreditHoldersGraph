type Project @entity {
  id: Bytes!
  projectId: BigInt! # uint256
  projectAddress: Bytes! # address
  projectName: String!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  activities: [Activity!]! @derivedFrom(field: "project")

  vintages: [Vintage!]! @derivedFrom(field: "project")
  retirements: [Retirement!]! @derivedFrom(field: "project")
  cancellations: [CancelledCredits!]! @derivedFrom(field: "project")
  assets: [Asset!]! @derivedFrom(field: "project")
}

type Vintage @entity {
  id: ID!
  serialization: String!
  estimatedAmount: BigInt!
  totalRetiredAmount: BigDecimal!
  totalCancelledAmount: BigDecimal!

  retirementCertificates: [Retirement!] @derivedFrom(field: "vintage")
  assets: [Asset!]! @derivedFrom(field: "vintage")

  project: Project!
}

"""
Asset stores all high level variables for a Token asset
"""
type Asset @entity {
  "Token address concat with the TokenId"
  id: ID!

  "Token - project - address"
  projectAddress: Bytes!

  project: Project!
  "Token Id"
  tokenId: BigInt!

  "Token decimals, 18 is the default which means 1e18 tokens equals 1tCO2"
  decimals: Int!

  "The serialization of the underlying asset"
  serialization: String!
  "Type of asset "
  type: String!
  supply: BigInt!

  activities: [Activity!]! @derivedFrom(field: "asset")
  holders: [AccountBalance!]! @derivedFrom(field: "asset")
  retirementCertificate: Retirement @derivedFrom(field: "asset")
  transfers: [Transfer!]! @derivedFrom(field: "asset")
  vintage: Vintage!
}

"""
Account is an ETH address, with a list of all Token assets the account has
"""
type Account @entity {
  "ETH address"
  id: ID!
  "Array of credits user has had a balance"
  balances: [AccountBalance!]! @derivedFrom(field: "account")

  activities: [Activity!]! @derivedFrom(field: "account")
  cancellations: [CancelledCredits!] @derivedFrom(field: "account")
  anteForPostExchanges: [ExchangeAnteForPost!] @derivedFrom(field: "account")
  retirements: [Retirement!]! @derivedFrom(field: "account")
  transfers: [AccountTransfer!]! @derivedFrom(field: "account")
}

"""
AccountBalance is a single account within a single credit asset
"""
type AccountBalance @entity {
  "Concatination of accountId and assetId"
  id: ID!
  "Account address"
  accountAddress: Bytes!
  "Token balance of the user"
  decimalBalance: BigDecimal!
  balance: BigInt!

  "Relation to asset"
  asset: Asset!
  "Relation to user"
  account: Account!
}

"""
Below are the entities that store the events emitted by the contracts.
For historical purposes.
"""
type Activity @entity(immutable: true) {
  id: Bytes!
  contractAddress: Bytes! # address
  type: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project!
  account: Account
  asset: Asset

  projectCreated: ProjectCreated
  adminClawback: AdminClawback
  cancelledCredits: CancelledCredits
  exAnteMinted: ExAnteMinted
  exPostCreated: ExPostCreated
  exPostVerifiedAndMinted: ExPostVerifiedAndMinted
  exchangeAnteForPost: ExchangeAnteForPost
  retirement: Retirement
  transfer: Transfer
  vintageMitigationEstimateChanged: VintageMitigationEstimateChanged
}

type ProjectCreated @entity(immutable: true) {
  id: Bytes!
  projectId: BigInt! # uint256
  projectAddress: Bytes! # address
  projectName: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project
}

type AdminClawback @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  projectAddress: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
  reason: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project
  asset: Asset
  fromAccount: Account
}

type CancelledCredits @entity(immutable: true) {
  id: Bytes!
  cancellorAddress: Bytes! # address
  projectAddress: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
  reason: String! # string
  data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project
  asset: Asset
  account: Account
}

type ExAnteMinted @entity(immutable: true) {
  id: Bytes!
  projectAddress: Bytes! # address
  exAnteTokenId: BigInt! # uint256
  exPostTokenId: BigInt! # uint256
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project
  asset: Asset
  account: Account
}

type ExPostCreated @entity(immutable: true) {
  id: Bytes!
  projectAddress: Bytes! # address
  tokenId: BigInt! # uint256
  estimatedAmount: BigInt! # uint256
  verificationPeriodStart: BigInt! # uint256
  verificationPeriodEnd: BigInt! # uint256
  serialization: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project
  asset: Asset
}

type ExPostVerifiedAndMinted @entity(immutable: true) {
  id: Bytes!
  projectAddress: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
  amountToAnteHolders: BigInt! # uint256
  verificationPeriodStart: BigInt! # uint256
  verificationPeriodEnd: BigInt! # uint256
  monitoringReport: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project
  asset: Asset
}

type ExchangeAnteForPost @entity(immutable: true) {
  id: Bytes!
  projectAddress: Bytes! # address
  address: Bytes! # address
  exPostTokenId: BigInt! # uint256
  exPostAmountReceived: BigInt! # uint256
  exAnteAmountBurned: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project
  account: Account
}

type Retirement @entity(immutable: true) {
  id: Bytes!
  projectAddress: Bytes! # address
  retiree: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
  nftTokenId: BigInt! # uint256
  data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  asset: Asset
  project: Project
  account: Account
  vintage: Vintage
}

"""
AccountTransfer is a link entity between Account and Transfer
- so for each transfer there are two AccountTransfers created (sender and receiver)
"""
type AccountTransfer @entity(immutable: true) {
  id: Bytes!
  projectAddress: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project
  asset: Asset

  transfer: Transfer
  account: Account
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  projectAddress: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project
  asset: Asset
}

type VintageMitigationEstimateChanged @entity(immutable: true) {
  id: Bytes!
  projectAddress: Bytes! # address
  tokenId: BigInt! # uint256
  newEstimate: BigInt! # uint256
  oldEstimate: BigInt! # uint256
  reason: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  project: Project
}
