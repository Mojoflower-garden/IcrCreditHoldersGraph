// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AdminBurn extends ethereum.Event {
  get params(): AdminBurn__Params {
    return new AdminBurn__Params(this);
  }
}

export class AdminBurn__Params {
  _event: AdminBurn;

  constructor(event: AdminBurn) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get reason(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AdminClawback extends ethereum.Event {
  get params(): AdminClawback__Params {
    return new AdminClawback__Params(this);
  }
}

export class AdminClawback__Params {
  _event: AdminClawback;

  constructor(event: AdminClawback) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reason(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CancelledCredits extends ethereum.Event {
  get params(): CancelledCredits__Params {
    return new CancelledCredits__Params(this);
  }
}

export class CancelledCredits__Params {
  _event: CancelledCredits;

  constructor(event: CancelledCredits) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[3].value.toString();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class ExAnteMinted extends ethereum.Event {
  get params(): ExAnteMinted__Params {
    return new ExAnteMinted__Params(this);
  }
}

export class ExAnteMinted__Params {
  _event: ExAnteMinted;

  constructor(event: ExAnteMinted) {
    this._event = event;
  }

  get exAnteTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get exPostTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ExPostCreated extends ethereum.Event {
  get params(): ExPostCreated__Params {
    return new ExPostCreated__Params(this);
  }
}

export class ExPostCreated__Params {
  _event: ExPostCreated;

  constructor(event: ExPostCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get estimatedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get verificationPeriodStart(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get verificationPeriodEnd(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get serialization(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class ExPostVerifiedAndMinted extends ethereum.Event {
  get params(): ExPostVerifiedAndMinted__Params {
    return new ExPostVerifiedAndMinted__Params(this);
  }
}

export class ExPostVerifiedAndMinted__Params {
  _event: ExPostVerifiedAndMinted;

  constructor(event: ExPostVerifiedAndMinted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountToAnteHolders(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get verificationPeriodStart(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get verificationPeriodEnd(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get monitoringReport(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class ExchangeAnteForPost extends ethereum.Event {
  get params(): ExchangeAnteForPost__Params {
    return new ExchangeAnteForPost__Params(this);
  }
}

export class ExchangeAnteForPost__Params {
  _event: ExchangeAnteForPost;

  constructor(event: ExchangeAnteForPost) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get exPostTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get exPostAmountReceived(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get exAnteAmountBurned(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RetiredVintage extends ethereum.Event {
  get params(): RetiredVintage__Params {
    return new RetiredVintage__Params(this);
  }
}

export class RetiredVintage__Params {
  _event: RetiredVintage;

  constructor(event: RetiredVintage) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftTokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSignatureValid extends ethereum.Event {
  get params(): TransferSignatureValid__Params {
    return new TransferSignatureValid__Params(this);
  }
}

export class TransferSignatureValid__Params {
  _event: TransferSignatureValid;

  constructor(event: TransferSignatureValid) {
    this._event = event;
  }

  get signature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get payload(): TransferSignatureValidPayloadStruct {
    return changetype<TransferSignatureValidPayloadStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }
}

export class TransferSignatureValidPayloadStruct extends ethereum.Tuple {
  get deadline(): BigInt {
    return this[0].toBigInt();
  }

  get description(): string {
    return this[1].toString();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get nonce(): BigInt {
    return this[6].toBigInt();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VintageMitigationEstimateChanged extends ethereum.Event {
  get params(): VintageMitigationEstimateChanged__Params {
    return new VintageMitigationEstimateChanged__Params(this);
  }
}

export class VintageMitigationEstimateChanged__Params {
  _event: VintageMitigationEstimateChanged;

  constructor(event: VintageMitigationEstimateChanged) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newEstimate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldEstimate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get reason(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class ProjectContract__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class ProjectContract__exPostVintageMappingResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getSerialization(): string {
    return this.value0;
  }

  getEstMitigations(): BigInt {
    return this.value1;
  }

  getVerificationPeriodStart(): BigInt {
    return this.value2;
  }

  getVerificationPeriodEnd(): BigInt {
    return this.value3;
  }

  getLastVerificationTimestamp(): BigInt {
    return this.value4;
  }
}

export class ProjectContract__retireFromSignatureInputPayloadStruct extends ethereum.Tuple {
  get deadline(): BigInt {
    return this[0].toBigInt();
  }

  get description(): string {
    return this[1].toString();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get nonce(): BigInt {
    return this[6].toBigInt();
  }
}

export class ProjectContract__retirementMappingResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: string;
  value4: string;
  value5: string;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: string,
    value4: string,
    value5: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    return map;
  }

  getRetiree(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getVintageTokenId(): BigInt {
    return this.value2;
  }

  getRetireeName(): string {
    return this.value3;
  }

  getCustomUri(): string {
    return this.value4;
  }

  getComment(): string {
    return this.value5;
  }
}

export class ProjectContract extends ethereum.SmartContract {
  static bind(address: Address): ProjectContract {
    return new ProjectContract("ProjectContract", address);
  }

  ANTE_MINTER_ROLE(): Bytes {
    let result = super.call(
      "ANTE_MINTER_ROLE",
      "ANTE_MINTER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_ANTE_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ANTE_MINTER_ROLE",
      "ANTE_MINTER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  BLACKLISTED(): Bytes {
    let result = super.call("BLACKLISTED", "BLACKLISTED():(bytes32)", []);

    return result[0].toBytes();
  }

  try_BLACKLISTED(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("BLACKLISTED", "BLACKLISTED():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  BLACKLISTER_ROLE(): Bytes {
    let result = super.call(
      "BLACKLISTER_ROLE",
      "BLACKLISTER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_BLACKLISTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "BLACKLISTER_ROLE",
      "BLACKLISTER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  BURNER_ROLE(): Bytes {
    let result = super.call("BURNER_ROLE", "BURNER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_BURNER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("BURNER_ROLE", "BURNER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CLAWBACK_ROLE(): Bytes {
    let result = super.call("CLAWBACK_ROLE", "CLAWBACK_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_CLAWBACK_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CLAWBACK_ROLE",
      "CLAWBACK_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  POST_MINTER_ROLE(): Bytes {
    let result = super.call(
      "POST_MINTER_ROLE",
      "POST_MINTER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_POST_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "POST_MINTER_ROLE",
      "POST_MINTER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADER_ROLE(): Bytes {
    let result = super.call("UPGRADER_ROLE", "UPGRADER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UPGRADER_ROLE",
      "UPGRADER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  URI_SETTER_ROLE(): Bytes {
    let result = super.call(
      "URI_SETTER_ROLE",
      "URI_SETTER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_URI_SETTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "URI_SETTER_ROLE",
      "URI_SETTER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VERIFIER_ROLE(): Bytes {
    let result = super.call("VERIFIER_ROLE", "VERIFIER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_VERIFIER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "VERIFIER_ROLE",
      "VERIFIER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  contractRegistry(): Address {
    let result = super.call(
      "contractRegistry",
      "contractRegistry():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_contractRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contractRegistry",
      "contractRegistry():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  eip712Domain(): ProjectContract__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new ProjectContract__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<ProjectContract__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProjectContract__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  exAnteToExPostTokenId(param0: BigInt): BigInt {
    let result = super.call(
      "exAnteToExPostTokenId",
      "exAnteToExPostTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_exAnteToExPostTokenId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exAnteToExPostTokenId",
      "exAnteToExPostTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exPostToExAnteTokenId(param0: BigInt): BigInt {
    let result = super.call(
      "exPostToExAnteTokenId",
      "exPostToExAnteTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_exPostToExAnteTokenId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exPostToExAnteTokenId",
      "exPostToExAnteTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exPostVintageMapping(
    param0: BigInt,
  ): ProjectContract__exPostVintageMappingResult {
    let result = super.call(
      "exPostVintageMapping",
      "exPostVintageMapping(uint256):(string,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new ProjectContract__exPostVintageMappingResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_exPostVintageMapping(
    param0: BigInt,
  ): ethereum.CallResult<ProjectContract__exPostVintageMappingResult> {
    let result = super.tryCall(
      "exPostVintageMapping",
      "exPostVintageMapping(uint256):(string,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProjectContract__exPostVintageMappingResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isExPostToken(tokenId: BigInt): boolean {
    let result = super.call("isExPostToken", "isExPostToken(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toBoolean();
  }

  try_isExPostToken(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isExPostToken",
      "isExPostToken(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxAntePercentage(): i32 {
    let result = super.call(
      "maxAntePercentage",
      "maxAntePercentage():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_maxAntePercentage(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maxAntePercentage",
      "maxAntePercentage():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  methodology(): string {
    let result = super.call("methodology", "methodology():(string)", []);

    return result[0].toString();
  }

  try_methodology(): ethereum.CallResult<string> {
    let result = super.tryCall("methodology", "methodology():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  projectId(): BigInt {
    let result = super.call("projectId", "projectId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_projectId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("projectId", "projectId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projectName(): string {
    let result = super.call("projectName", "projectName():(string)", []);

    return result[0].toString();
  }

  try_projectName(): ethereum.CallResult<string> {
    let result = super.tryCall("projectName", "projectName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  projectUri(): string {
    let result = super.call("projectUri", "projectUri():(string)", []);

    return result[0].toString();
  }

  try_projectUri(): ethereum.CallResult<string> {
    let result = super.tryCall("projectUri", "projectUri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  retire(
    tokenId: BigInt,
    amount: BigInt,
    beneficiary: Address,
    retireeName: string,
    customUri: string,
    comment: string,
    data: Bytes,
  ): BigInt {
    let result = super.call(
      "retire",
      "retire(uint256,uint256,address,string,string,string,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(beneficiary),
        ethereum.Value.fromString(retireeName),
        ethereum.Value.fromString(customUri),
        ethereum.Value.fromString(comment),
        ethereum.Value.fromBytes(data),
      ],
    );

    return result[0].toBigInt();
  }

  try_retire(
    tokenId: BigInt,
    amount: BigInt,
    beneficiary: Address,
    retireeName: string,
    customUri: string,
    comment: string,
    data: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "retire",
      "retire(uint256,uint256,address,string,string,string,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(beneficiary),
        ethereum.Value.fromString(retireeName),
        ethereum.Value.fromString(customUri),
        ethereum.Value.fromString(comment),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retireFromSignature(
    signature: Bytes,
    payload: ProjectContract__retireFromSignatureInputPayloadStruct,
    retireeName: string,
    customUri: string,
    comment: string,
    data: Bytes,
  ): BigInt {
    let result = super.call(
      "retireFromSignature",
      "retireFromSignature(bytes,(uint256,string,address,address,uint256,uint256,uint256),string,string,string,bytes):(uint256)",
      [
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromTuple(payload),
        ethereum.Value.fromString(retireeName),
        ethereum.Value.fromString(customUri),
        ethereum.Value.fromString(comment),
        ethereum.Value.fromBytes(data),
      ],
    );

    return result[0].toBigInt();
  }

  try_retireFromSignature(
    signature: Bytes,
    payload: ProjectContract__retireFromSignatureInputPayloadStruct,
    retireeName: string,
    customUri: string,
    comment: string,
    data: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "retireFromSignature",
      "retireFromSignature(bytes,(uint256,string,address,address,uint256,uint256,uint256),string,string,string,bytes):(uint256)",
      [
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromTuple(payload),
        ethereum.Value.fromString(retireeName),
        ethereum.Value.fromString(customUri),
        ethereum.Value.fromString(comment),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retirementMapping(param0: BigInt): ProjectContract__retirementMappingResult {
    let result = super.call(
      "retirementMapping",
      "retirementMapping(uint256):(address,uint256,uint256,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new ProjectContract__retirementMappingResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toString(),
      result[4].toString(),
      result[5].toString(),
    );
  }

  try_retirementMapping(
    param0: BigInt,
  ): ethereum.CallResult<ProjectContract__retirementMappingResult> {
    let result = super.tryCall(
      "retirementMapping",
      "retirementMapping(uint256):(address,uint256,uint256,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ProjectContract__retirementMappingResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toString(),
        value[4].toString(),
        value[5].toString(),
      ),
    );
  }

  serializationToExPostTokenIdMapping(param0: string): BigInt {
    let result = super.call(
      "serializationToExPostTokenIdMapping",
      "serializationToExPostTokenIdMapping(string):(uint256)",
      [ethereum.Value.fromString(param0)],
    );

    return result[0].toBigInt();
  }

  try_serializationToExPostTokenIdMapping(
    param0: string,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "serializationToExPostTokenIdMapping",
      "serializationToExPostTokenIdMapping(string):(uint256)",
      [ethereum.Value.fromString(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signatureNonces(param0: Address): BigInt {
    let result = super.call(
      "signatureNonces",
      "signatureNonces(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_signatureNonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signatureNonces",
      "signatureNonces(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  testUpgrade(): string {
    let result = super.call("testUpgrade", "testUpgrade():(string)", []);

    return result[0].toString();
  }

  try_testUpgrade(): ethereum.CallResult<string> {
    let result = super.tryCall("testUpgrade", "testUpgrade():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  topTokenId(): BigInt {
    let result = super.call("topTokenId", "topTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_topTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("topTokenId", "topTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class __ProjectStorage_initCall extends ethereum.Call {
  get inputs(): __ProjectStorage_initCall__Inputs {
    return new __ProjectStorage_initCall__Inputs(this);
  }

  get outputs(): __ProjectStorage_initCall__Outputs {
    return new __ProjectStorage_initCall__Outputs(this);
  }
}

export class __ProjectStorage_initCall__Inputs {
  _call: __ProjectStorage_initCall;

  constructor(call: __ProjectStorage_initCall) {
    this._call = call;
  }

  get _contractRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _projectId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _projectName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _projectUri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _methodology(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class __ProjectStorage_initCall__Outputs {
  _call: __ProjectStorage_initCall;

  constructor(call: __ProjectStorage_initCall) {
    this._call = call;
  }
}

export class AdminClawbackCall extends ethereum.Call {
  get inputs(): AdminClawbackCall__Inputs {
    return new AdminClawbackCall__Inputs(this);
  }

  get outputs(): AdminClawbackCall__Outputs {
    return new AdminClawbackCall__Outputs(this);
  }
}

export class AdminClawbackCall__Inputs {
  _call: AdminClawbackCall;

  constructor(call: AdminClawbackCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get reason(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class AdminClawbackCall__Outputs {
  _call: AdminClawbackCall;

  constructor(call: AdminClawbackCall) {
    this._call = call;
  }
}

export class BurnFromAccountCall extends ethereum.Call {
  get inputs(): BurnFromAccountCall__Inputs {
    return new BurnFromAccountCall__Inputs(this);
  }

  get outputs(): BurnFromAccountCall__Outputs {
    return new BurnFromAccountCall__Outputs(this);
  }
}

export class BurnFromAccountCall__Inputs {
  _call: BurnFromAccountCall;

  constructor(call: BurnFromAccountCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnFromAccountCall__Outputs {
  _call: BurnFromAccountCall;

  constructor(call: BurnFromAccountCall) {
    this._call = call;
  }
}

export class CancelCreditsFromSignatureCall extends ethereum.Call {
  get inputs(): CancelCreditsFromSignatureCall__Inputs {
    return new CancelCreditsFromSignatureCall__Inputs(this);
  }

  get outputs(): CancelCreditsFromSignatureCall__Outputs {
    return new CancelCreditsFromSignatureCall__Outputs(this);
  }
}

export class CancelCreditsFromSignatureCall__Inputs {
  _call: CancelCreditsFromSignatureCall;

  constructor(call: CancelCreditsFromSignatureCall) {
    this._call = call;
  }

  get signature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get payload(): CancelCreditsFromSignatureCallPayloadStruct {
    return changetype<CancelCreditsFromSignatureCallPayloadStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get comment(): string {
    return this._call.inputValues[2].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CancelCreditsFromSignatureCall__Outputs {
  _call: CancelCreditsFromSignatureCall;

  constructor(call: CancelCreditsFromSignatureCall) {
    this._call = call;
  }
}

export class CancelCreditsFromSignatureCallPayloadStruct extends ethereum.Tuple {
  get deadline(): BigInt {
    return this[0].toBigInt();
  }

  get description(): string {
    return this[1].toString();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get nonce(): BigInt {
    return this[6].toBigInt();
  }
}

export class ChangeVintageMitigationEstimateCall extends ethereum.Call {
  get inputs(): ChangeVintageMitigationEstimateCall__Inputs {
    return new ChangeVintageMitigationEstimateCall__Inputs(this);
  }

  get outputs(): ChangeVintageMitigationEstimateCall__Outputs {
    return new ChangeVintageMitigationEstimateCall__Outputs(this);
  }
}

export class ChangeVintageMitigationEstimateCall__Inputs {
  _call: ChangeVintageMitigationEstimateCall;

  constructor(call: ChangeVintageMitigationEstimateCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newEstAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get reason(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class ChangeVintageMitigationEstimateCall__Outputs {
  _call: ChangeVintageMitigationEstimateCall;

  constructor(call: ChangeVintageMitigationEstimateCall) {
    this._call = call;
  }
}

export class CreateExPostVintageCall extends ethereum.Call {
  get inputs(): CreateExPostVintageCall__Inputs {
    return new CreateExPostVintageCall__Inputs(this);
  }

  get outputs(): CreateExPostVintageCall__Outputs {
    return new CreateExPostVintageCall__Outputs(this);
  }
}

export class CreateExPostVintageCall__Inputs {
  _call: CreateExPostVintageCall;

  constructor(call: CreateExPostVintageCall) {
    this._call = call;
  }

  get estAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get verificationPeriodStart(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get verificationPeriodEnd(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get serialization(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateExPostVintageCall__Outputs {
  _call: CreateExPostVintageCall;

  constructor(call: CreateExPostVintageCall) {
    this._call = call;
  }
}

export class CreateExPostVintageBatchCall extends ethereum.Call {
  get inputs(): CreateExPostVintageBatchCall__Inputs {
    return new CreateExPostVintageBatchCall__Inputs(this);
  }

  get outputs(): CreateExPostVintageBatchCall__Outputs {
    return new CreateExPostVintageBatchCall__Outputs(this);
  }
}

export class CreateExPostVintageBatchCall__Inputs {
  _call: CreateExPostVintageBatchCall;

  constructor(call: CreateExPostVintageBatchCall) {
    this._call = call;
  }

  get vintages(): Array<CreateExPostVintageBatchCallVintagesStruct> {
    return this._call.inputValues[0].value.toTupleArray<CreateExPostVintageBatchCallVintagesStruct>();
  }
}

export class CreateExPostVintageBatchCall__Outputs {
  _call: CreateExPostVintageBatchCall;

  constructor(call: CreateExPostVintageBatchCall) {
    this._call = call;
  }
}

export class CreateExPostVintageBatchCallVintagesStruct extends ethereum.Tuple {
  get serialization(): string {
    return this[0].toString();
  }

  get estMitigations(): BigInt {
    return this[1].toBigInt();
  }

  get verificationPeriodStart(): BigInt {
    return this[2].toBigInt();
  }

  get verificationPeriodEnd(): BigInt {
    return this[3].toBigInt();
  }

  get lastVerificationTimestamp(): BigInt {
    return this[4].toBigInt();
  }
}

export class ExchangeAnteForPostEvenStevenCall extends ethereum.Call {
  get inputs(): ExchangeAnteForPostEvenStevenCall__Inputs {
    return new ExchangeAnteForPostEvenStevenCall__Inputs(this);
  }

  get outputs(): ExchangeAnteForPostEvenStevenCall__Outputs {
    return new ExchangeAnteForPostEvenStevenCall__Outputs(this);
  }
}

export class ExchangeAnteForPostEvenStevenCall__Inputs {
  _call: ExchangeAnteForPostEvenStevenCall;

  constructor(call: ExchangeAnteForPostEvenStevenCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get exPostTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExchangeAnteForPostEvenStevenCall__Outputs {
  _call: ExchangeAnteForPostEvenStevenCall;

  constructor(call: ExchangeAnteForPostEvenStevenCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _contractRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _projectId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _projectName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _projectMethodology(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _projectUri(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintExAnteCall extends ethereum.Call {
  get inputs(): MintExAnteCall__Inputs {
    return new MintExAnteCall__Inputs(this);
  }

  get outputs(): MintExAnteCall__Outputs {
    return new MintExAnteCall__Outputs(this);
  }
}

export class MintExAnteCall__Inputs {
  _call: MintExAnteCall;

  constructor(call: MintExAnteCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get exPostTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class MintExAnteCall__Outputs {
  _call: MintExAnteCall;

  constructor(call: MintExAnteCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RetireCall extends ethereum.Call {
  get inputs(): RetireCall__Inputs {
    return new RetireCall__Inputs(this);
  }

  get outputs(): RetireCall__Outputs {
    return new RetireCall__Outputs(this);
  }
}

export class RetireCall__Inputs {
  _call: RetireCall;

  constructor(call: RetireCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get retireeName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get customUri(): string {
    return this._call.inputValues[4].value.toString();
  }

  get comment(): string {
    return this._call.inputValues[5].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class RetireCall__Outputs {
  _call: RetireCall;

  constructor(call: RetireCall) {
    this._call = call;
  }

  get nftTokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RetireFromSignatureCall extends ethereum.Call {
  get inputs(): RetireFromSignatureCall__Inputs {
    return new RetireFromSignatureCall__Inputs(this);
  }

  get outputs(): RetireFromSignatureCall__Outputs {
    return new RetireFromSignatureCall__Outputs(this);
  }
}

export class RetireFromSignatureCall__Inputs {
  _call: RetireFromSignatureCall;

  constructor(call: RetireFromSignatureCall) {
    this._call = call;
  }

  get signature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get payload(): RetireFromSignatureCallPayloadStruct {
    return changetype<RetireFromSignatureCallPayloadStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get retireeName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get customUri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get comment(): string {
    return this._call.inputValues[4].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class RetireFromSignatureCall__Outputs {
  _call: RetireFromSignatureCall;

  constructor(call: RetireFromSignatureCall) {
    this._call = call;
  }

  get nftTokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RetireFromSignatureCallPayloadStruct extends ethereum.Tuple {
  get deadline(): BigInt {
    return this[0].toBigInt();
  }

  get description(): string {
    return this[1].toString();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get nonce(): BigInt {
    return this[6].toBigInt();
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetURICall extends ethereum.Call {
  get inputs(): SetURICall__Inputs {
    return new SetURICall__Inputs(this);
  }

  get outputs(): SetURICall__Outputs {
    return new SetURICall__Outputs(this);
  }
}

export class SetURICall__Inputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }

  get newuri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetURICall__Outputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }
}

export class TransferFromSignatureCall extends ethereum.Call {
  get inputs(): TransferFromSignatureCall__Inputs {
    return new TransferFromSignatureCall__Inputs(this);
  }

  get outputs(): TransferFromSignatureCall__Outputs {
    return new TransferFromSignatureCall__Outputs(this);
  }
}

export class TransferFromSignatureCall__Inputs {
  _call: TransferFromSignatureCall;

  constructor(call: TransferFromSignatureCall) {
    this._call = call;
  }

  get signature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get payload(): TransferFromSignatureCallPayloadStruct {
    return changetype<TransferFromSignatureCallPayloadStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class TransferFromSignatureCall__Outputs {
  _call: TransferFromSignatureCall;

  constructor(call: TransferFromSignatureCall) {
    this._call = call;
  }
}

export class TransferFromSignatureCallPayloadStruct extends ethereum.Tuple {
  get deadline(): BigInt {
    return this[0].toBigInt();
  }

  get description(): string {
    return this[1].toString();
  }

  get signer(): Address {
    return this[2].toAddress();
  }

  get to(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get nonce(): BigInt {
    return this[6].toBigInt();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class VerifyAndMintExPostCall extends ethereum.Call {
  get inputs(): VerifyAndMintExPostCall__Inputs {
    return new VerifyAndMintExPostCall__Inputs(this);
  }

  get outputs(): VerifyAndMintExPostCall__Outputs {
    return new VerifyAndMintExPostCall__Outputs(this);
  }
}

export class VerifyAndMintExPostCall__Inputs {
  _call: VerifyAndMintExPostCall;

  constructor(call: VerifyAndMintExPostCall) {
    this._call = call;
  }

  get verificationVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountVerified(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountToAnteHolders(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get verificationPeriodStart(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get verificationPeriodEnd(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get monitoringReport(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class VerifyAndMintExPostCall__Outputs {
  _call: VerifyAndMintExPostCall;

  constructor(call: VerifyAndMintExPostCall) {
    this._call = call;
  }
}
