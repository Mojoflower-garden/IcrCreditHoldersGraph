// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Project extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Project must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Project", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Project | null {
    return changetype<Project | null>(
      store.get_in_block("Project", id.toHexString()),
    );
  }

  static load(id: Bytes): Project | null {
    return changetype<Project | null>(store.get("Project", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get projectName(): string {
    let value = this.get("projectName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set projectName(value: string) {
    this.set("projectName", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get activities(): ActivityLoader {
    return new ActivityLoader(
      "Project",
      this.get("id")!.toBytes().toHexString(),
      "activities",
    );
  }

  get vintages(): VintageLoader {
    return new VintageLoader(
      "Project",
      this.get("id")!.toBytes().toHexString(),
      "vintages",
    );
  }

  get retirements(): RetirementLoader {
    return new RetirementLoader(
      "Project",
      this.get("id")!.toBytes().toHexString(),
      "retirements",
    );
  }

  get cancellations(): CancelledCreditsLoader {
    return new CancelledCreditsLoader(
      "Project",
      this.get("id")!.toBytes().toHexString(),
      "cancellations",
    );
  }

  get assets(): AssetLoader {
    return new AssetLoader(
      "Project",
      this.get("id")!.toBytes().toHexString(),
      "assets",
    );
  }
}

export class Vintage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vintage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vintage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Vintage", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Vintage | null {
    return changetype<Vintage | null>(store.get_in_block("Vintage", id));
  }

  static load(id: string): Vintage | null {
    return changetype<Vintage | null>(store.get("Vintage", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get serialization(): string {
    let value = this.get("serialization");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set serialization(value: string) {
    this.set("serialization", Value.fromString(value));
  }

  get estimatedAmount(): BigInt {
    let value = this.get("estimatedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set estimatedAmount(value: BigInt) {
    this.set("estimatedAmount", Value.fromBigInt(value));
  }

  get totalRetiredAmount(): BigDecimal {
    let value = this.get("totalRetiredAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalRetiredAmount(value: BigDecimal) {
    this.set("totalRetiredAmount", Value.fromBigDecimal(value));
  }

  get totalExPostCancelledAmount(): BigDecimal {
    let value = this.get("totalExPostCancelledAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalExPostCancelledAmount(value: BigDecimal) {
    this.set("totalExPostCancelledAmount", Value.fromBigDecimal(value));
  }

  get totalExAnteCancelledAmount(): BigDecimal {
    let value = this.get("totalExAnteCancelledAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalExAnteCancelledAmount(value: BigDecimal) {
    this.set("totalExAnteCancelledAmount", Value.fromBigDecimal(value));
  }

  get totalExPostIssued(): BigDecimal {
    let value = this.get("totalExPostIssued");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalExPostIssued(value: BigDecimal) {
    this.set("totalExPostIssued", Value.fromBigDecimal(value));
  }

  get totalExAnteIssued(): BigDecimal {
    let value = this.get("totalExAnteIssued");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalExAnteIssued(value: BigDecimal) {
    this.set("totalExAnteIssued", Value.fromBigDecimal(value));
  }

  get retirementCertificates(): RetirementLoader {
    return new RetirementLoader(
      "Vintage",
      this.get("id")!.toString(),
      "retirementCertificates",
    );
  }

  get cancellations(): CancelledCreditsLoader {
    return new CancelledCreditsLoader(
      "Vintage",
      this.get("id")!.toString(),
      "cancellations",
    );
  }

  get assets(): AssetLoader {
    return new AssetLoader("Vintage", this.get("id")!.toString(), "assets");
  }

  get project(): Bytes {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes) {
    this.set("project", Value.fromBytes(value));
  }
}

export class Asset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Asset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Asset must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Asset", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Asset | null {
    return changetype<Asset | null>(store.get_in_block("Asset", id));
  }

  static load(id: string): Asset | null {
    return changetype<Asset | null>(store.get("Asset", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get project(): Bytes {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes) {
    this.set("project", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get serialization(): string {
    let value = this.get("serialization");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set serialization(value: string) {
    this.set("serialization", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get supply(): BigInt {
    let value = this.get("supply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set supply(value: BigInt) {
    this.set("supply", Value.fromBigInt(value));
  }

  get activities(): ActivityLoader {
    return new ActivityLoader(
      "Asset",
      this.get("id")!.toString(),
      "activities",
    );
  }

  get holders(): AccountBalanceLoader {
    return new AccountBalanceLoader(
      "Asset",
      this.get("id")!.toString(),
      "holders",
    );
  }

  get retirementCertificate(): RetirementLoader {
    return new RetirementLoader(
      "Asset",
      this.get("id")!.toString(),
      "retirementCertificate",
    );
  }

  get transfers(): TransferLoader {
    return new TransferLoader("Asset", this.get("id")!.toString(), "transfers");
  }

  get vintage(): string {
    let value = this.get("vintage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vintage(value: string) {
    this.set("vintage", Value.fromString(value));
  }

  get cancelledCredits(): CancelledCreditsLoader {
    return new CancelledCreditsLoader(
      "Asset",
      this.get("id")!.toString(),
      "cancelledCredits",
    );
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balances(): AccountBalanceLoader {
    return new AccountBalanceLoader(
      "Account",
      this.get("id")!.toString(),
      "balances",
    );
  }

  get activities(): ActivityLoader {
    return new ActivityLoader(
      "Account",
      this.get("id")!.toString(),
      "activities",
    );
  }

  get cancellations(): CancelledCreditsLoader {
    return new CancelledCreditsLoader(
      "Account",
      this.get("id")!.toString(),
      "cancellations",
    );
  }

  get anteForPostExchanges(): ExchangeAnteForPostLoader {
    return new ExchangeAnteForPostLoader(
      "Account",
      this.get("id")!.toString(),
      "anteForPostExchanges",
    );
  }

  get retirements(): RetirementLoader {
    return new RetirementLoader(
      "Account",
      this.get("id")!.toString(),
      "retirements",
    );
  }

  get transfers(): AccountTransferLoader {
    return new AccountTransferLoader(
      "Account",
      this.get("id")!.toString(),
      "transfers",
    );
  }
}

export class AccountBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AccountBalance", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AccountBalance | null {
    return changetype<AccountBalance | null>(
      store.get_in_block("AccountBalance", id),
    );
  }

  static load(id: string): AccountBalance | null {
    return changetype<AccountBalance | null>(store.get("AccountBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accountAddress(): Bytes {
    let value = this.get("accountAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set accountAddress(value: Bytes) {
    this.set("accountAddress", Value.fromBytes(value));
  }

  get decimalBalance(): BigDecimal {
    let value = this.get("decimalBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set decimalBalance(value: BigDecimal) {
    this.set("decimalBalance", Value.fromBigDecimal(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get asset(): string {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }
}

export class Activity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Activity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Activity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Activity", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Activity | null {
    return changetype<Activity | null>(
      store.get_in_block("Activity", id.toHexString()),
    );
  }

  static load(id: Bytes): Activity | null {
    return changetype<Activity | null>(store.get("Activity", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get project(): Bytes {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes) {
    this.set("project", Value.fromBytes(value));
  }

  get account(): string | null {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (!value) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(<string>value));
    }
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get projectCreated(): Bytes | null {
    let value = this.get("projectCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set projectCreated(value: Bytes | null) {
    if (!value) {
      this.unset("projectCreated");
    } else {
      this.set("projectCreated", Value.fromBytes(<Bytes>value));
    }
  }

  get adminClawback(): Bytes | null {
    let value = this.get("adminClawback");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set adminClawback(value: Bytes | null) {
    if (!value) {
      this.unset("adminClawback");
    } else {
      this.set("adminClawback", Value.fromBytes(<Bytes>value));
    }
  }

  get cancelledCredits(): Bytes | null {
    let value = this.get("cancelledCredits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cancelledCredits(value: Bytes | null) {
    if (!value) {
      this.unset("cancelledCredits");
    } else {
      this.set("cancelledCredits", Value.fromBytes(<Bytes>value));
    }
  }

  get exAnteMinted(): Bytes | null {
    let value = this.get("exAnteMinted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set exAnteMinted(value: Bytes | null) {
    if (!value) {
      this.unset("exAnteMinted");
    } else {
      this.set("exAnteMinted", Value.fromBytes(<Bytes>value));
    }
  }

  get exPostCreated(): Bytes | null {
    let value = this.get("exPostCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set exPostCreated(value: Bytes | null) {
    if (!value) {
      this.unset("exPostCreated");
    } else {
      this.set("exPostCreated", Value.fromBytes(<Bytes>value));
    }
  }

  get exPostVerifiedAndMinted(): Bytes | null {
    let value = this.get("exPostVerifiedAndMinted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set exPostVerifiedAndMinted(value: Bytes | null) {
    if (!value) {
      this.unset("exPostVerifiedAndMinted");
    } else {
      this.set("exPostVerifiedAndMinted", Value.fromBytes(<Bytes>value));
    }
  }

  get exchangeAnteForPost(): Bytes | null {
    let value = this.get("exchangeAnteForPost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set exchangeAnteForPost(value: Bytes | null) {
    if (!value) {
      this.unset("exchangeAnteForPost");
    } else {
      this.set("exchangeAnteForPost", Value.fromBytes(<Bytes>value));
    }
  }

  get retirement(): Bytes | null {
    let value = this.get("retirement");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set retirement(value: Bytes | null) {
    if (!value) {
      this.unset("retirement");
    } else {
      this.set("retirement", Value.fromBytes(<Bytes>value));
    }
  }

  get transfer(): Bytes | null {
    let value = this.get("transfer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transfer(value: Bytes | null) {
    if (!value) {
      this.unset("transfer");
    } else {
      this.set("transfer", Value.fromBytes(<Bytes>value));
    }
  }

  get vintageMitigationEstimateChanged(): Bytes | null {
    let value = this.get("vintageMitigationEstimateChanged");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set vintageMitigationEstimateChanged(value: Bytes | null) {
    if (!value) {
      this.unset("vintageMitigationEstimateChanged");
    } else {
      this.set(
        "vintageMitigationEstimateChanged",
        Value.fromBytes(<Bytes>value),
      );
    }
  }
}

export class ProjectCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProjectCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProjectCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProjectCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ProjectCreated | null {
    return changetype<ProjectCreated | null>(
      store.get_in_block("ProjectCreated", id.toHexString()),
    );
  }

  static load(id: Bytes): ProjectCreated | null {
    return changetype<ProjectCreated | null>(
      store.get("ProjectCreated", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get projectName(): string {
    let value = this.get("projectName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set projectName(value: string) {
    this.set("projectName", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }
}

export class AdminClawback extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AdminClawback entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AdminClawback must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AdminClawback", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AdminClawback | null {
    return changetype<AdminClawback | null>(
      store.get_in_block("AdminClawback", id.toHexString()),
    );
  }

  static load(id: Bytes): AdminClawback | null {
    return changetype<AdminClawback | null>(
      store.get("AdminClawback", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get reason(): i32 {
    let value = this.get("reason");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set reason(value: i32) {
    this.set("reason", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get fromAccount(): string | null {
    let value = this.get("fromAccount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromAccount(value: string | null) {
    if (!value) {
      this.unset("fromAccount");
    } else {
      this.set("fromAccount", Value.fromString(<string>value));
    }
  }
}

export class CancelledCredits extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CancelledCredits entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CancelledCredits must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CancelledCredits", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): CancelledCredits | null {
    return changetype<CancelledCredits | null>(
      store.get_in_block("CancelledCredits", id.toHexString()),
    );
  }

  static load(id: Bytes): CancelledCredits | null {
    return changetype<CancelledCredits | null>(
      store.get("CancelledCredits", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get cancellorAddress(): Bytes {
    let value = this.get("cancellorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set cancellorAddress(value: Bytes) {
    this.set("cancellorAddress", Value.fromBytes(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get reason(): string {
    let value = this.get("reason");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reason(value: string) {
    this.set("reason", Value.fromString(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get vintage(): string | null {
    let value = this.get("vintage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vintage(value: string | null) {
    if (!value) {
      this.unset("vintage");
    } else {
      this.set("vintage", Value.fromString(<string>value));
    }
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (!value) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(<string>value));
    }
  }
}

export class ExAnteMinted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExAnteMinted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ExAnteMinted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ExAnteMinted", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ExAnteMinted | null {
    return changetype<ExAnteMinted | null>(
      store.get_in_block("ExAnteMinted", id.toHexString()),
    );
  }

  static load(id: Bytes): ExAnteMinted | null {
    return changetype<ExAnteMinted | null>(
      store.get("ExAnteMinted", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get exAnteTokenId(): BigInt {
    let value = this.get("exAnteTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set exAnteTokenId(value: BigInt) {
    this.set("exAnteTokenId", Value.fromBigInt(value));
  }

  get exPostTokenId(): BigInt {
    let value = this.get("exPostTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set exPostTokenId(value: BigInt) {
    this.set("exPostTokenId", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (!value) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(<string>value));
    }
  }
}

export class ExPostCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExPostCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ExPostCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ExPostCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ExPostCreated | null {
    return changetype<ExPostCreated | null>(
      store.get_in_block("ExPostCreated", id.toHexString()),
    );
  }

  static load(id: Bytes): ExPostCreated | null {
    return changetype<ExPostCreated | null>(
      store.get("ExPostCreated", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get estimatedAmount(): BigInt {
    let value = this.get("estimatedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set estimatedAmount(value: BigInt) {
    this.set("estimatedAmount", Value.fromBigInt(value));
  }

  get verificationPeriodStart(): BigInt {
    let value = this.get("verificationPeriodStart");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verificationPeriodStart(value: BigInt) {
    this.set("verificationPeriodStart", Value.fromBigInt(value));
  }

  get verificationPeriodEnd(): BigInt {
    let value = this.get("verificationPeriodEnd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verificationPeriodEnd(value: BigInt) {
    this.set("verificationPeriodEnd", Value.fromBigInt(value));
  }

  get serialization(): string {
    let value = this.get("serialization");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set serialization(value: string) {
    this.set("serialization", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }
}

export class ExPostVerifiedAndMinted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExPostVerifiedAndMinted entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ExPostVerifiedAndMinted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ExPostVerifiedAndMinted", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ExPostVerifiedAndMinted | null {
    return changetype<ExPostVerifiedAndMinted | null>(
      store.get_in_block("ExPostVerifiedAndMinted", id.toHexString()),
    );
  }

  static load(id: Bytes): ExPostVerifiedAndMinted | null {
    return changetype<ExPostVerifiedAndMinted | null>(
      store.get("ExPostVerifiedAndMinted", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountToAnteHolders(): BigInt {
    let value = this.get("amountToAnteHolders");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountToAnteHolders(value: BigInt) {
    this.set("amountToAnteHolders", Value.fromBigInt(value));
  }

  get verificationPeriodStart(): BigInt {
    let value = this.get("verificationPeriodStart");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verificationPeriodStart(value: BigInt) {
    this.set("verificationPeriodStart", Value.fromBigInt(value));
  }

  get verificationPeriodEnd(): BigInt {
    let value = this.get("verificationPeriodEnd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verificationPeriodEnd(value: BigInt) {
    this.set("verificationPeriodEnd", Value.fromBigInt(value));
  }

  get monitoringReport(): string {
    let value = this.get("monitoringReport");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set monitoringReport(value: string) {
    this.set("monitoringReport", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }
}

export class ExchangeAnteForPost extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExchangeAnteForPost entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ExchangeAnteForPost must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ExchangeAnteForPost", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ExchangeAnteForPost | null {
    return changetype<ExchangeAnteForPost | null>(
      store.get_in_block("ExchangeAnteForPost", id.toHexString()),
    );
  }

  static load(id: Bytes): ExchangeAnteForPost | null {
    return changetype<ExchangeAnteForPost | null>(
      store.get("ExchangeAnteForPost", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get exPostTokenId(): BigInt {
    let value = this.get("exPostTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set exPostTokenId(value: BigInt) {
    this.set("exPostTokenId", Value.fromBigInt(value));
  }

  get exPostAmountReceived(): BigInt {
    let value = this.get("exPostAmountReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set exPostAmountReceived(value: BigInt) {
    this.set("exPostAmountReceived", Value.fromBigInt(value));
  }

  get exAnteAmountBurned(): BigInt {
    let value = this.get("exAnteAmountBurned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set exAnteAmountBurned(value: BigInt) {
    this.set("exAnteAmountBurned", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (!value) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(<string>value));
    }
  }
}

export class Retirement extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Retirement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Retirement must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Retirement", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Retirement | null {
    return changetype<Retirement | null>(
      store.get_in_block("Retirement", id.toHexString()),
    );
  }

  static load(id: Bytes): Retirement | null {
    return changetype<Retirement | null>(
      store.get("Retirement", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get retiree(): Bytes {
    let value = this.get("retiree");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set retiree(value: Bytes) {
    this.set("retiree", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get nftTokenId(): BigInt {
    let value = this.get("nftTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nftTokenId(value: BigInt) {
    this.set("nftTokenId", Value.fromBigInt(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (!value) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(<string>value));
    }
  }

  get vintage(): string | null {
    let value = this.get("vintage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vintage(value: string | null) {
    if (!value) {
      this.unset("vintage");
    } else {
      this.set("vintage", Value.fromString(<string>value));
    }
  }
}

export class AccountTransfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AccountTransfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AccountTransfer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AccountTransfer | null {
    return changetype<AccountTransfer | null>(
      store.get_in_block("AccountTransfer", id.toHexString()),
    );
  }

  static load(id: Bytes): AccountTransfer | null {
    return changetype<AccountTransfer | null>(
      store.get("AccountTransfer", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get transfer(): Bytes | null {
    let value = this.get("transfer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transfer(value: Bytes | null) {
    if (!value) {
      this.unset("transfer");
    } else {
      this.set("transfer", Value.fromBytes(<Bytes>value));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (!value) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(<string>value));
    }
  }
}

export class Transfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Transfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transfer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Transfer | null {
    return changetype<Transfer | null>(
      store.get_in_block("Transfer", id.toHexString()),
    );
  }

  static load(id: Bytes): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }
}

export class VintageMitigationEstimateChanged extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save VintageMitigationEstimateChanged entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type VintageMitigationEstimateChanged must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set(
        "VintageMitigationEstimateChanged",
        id.toBytes().toHexString(),
        this,
      );
    }
  }

  static loadInBlock(id: Bytes): VintageMitigationEstimateChanged | null {
    return changetype<VintageMitigationEstimateChanged | null>(
      store.get_in_block("VintageMitigationEstimateChanged", id.toHexString()),
    );
  }

  static load(id: Bytes): VintageMitigationEstimateChanged | null {
    return changetype<VintageMitigationEstimateChanged | null>(
      store.get("VintageMitigationEstimateChanged", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get projectAddress(): Bytes {
    let value = this.get("projectAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set projectAddress(value: Bytes) {
    this.set("projectAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get newEstimate(): BigInt {
    let value = this.get("newEstimate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newEstimate(value: BigInt) {
    this.set("newEstimate", Value.fromBigInt(value));
  }

  get oldEstimate(): BigInt {
    let value = this.get("oldEstimate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oldEstimate(value: BigInt) {
    this.set("oldEstimate", Value.fromBigInt(value));
  }

  get reason(): i32 {
    let value = this.get("reason");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set reason(value: i32) {
    this.set("reason", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get project(): Bytes | null {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set project(value: Bytes | null) {
    if (!value) {
      this.unset("project");
    } else {
      this.set("project", Value.fromBytes(<Bytes>value));
    }
  }
}

export class ActivityLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Activity[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Activity[]>(value);
  }
}

export class VintageLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Vintage[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Vintage[]>(value);
  }
}

export class RetirementLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Retirement[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Retirement[]>(value);
  }
}

export class CancelledCreditsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CancelledCredits[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CancelledCredits[]>(value);
  }
}

export class AssetLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Asset[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Asset[]>(value);
  }
}

export class AccountBalanceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): AccountBalance[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<AccountBalance[]>(value);
  }
}

export class TransferLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Transfer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Transfer[]>(value);
  }
}

export class ExchangeAnteForPostLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ExchangeAnteForPost[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ExchangeAnteForPost[]>(value);
  }
}

export class AccountTransferLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): AccountTransfer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<AccountTransfer[]>(value);
  }
}
